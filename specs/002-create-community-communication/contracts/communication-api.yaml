openapi: 3.0.3
info:
  title: Community Communication Hub API
  description: |
    RESTful API for the Community Communication Hub feature of the Naboom Platform.
    Provides real-time messaging, event management, and multilingual support for South African communities.
  version: 1.0.0
  contact:
    name: Naboom Platform Team
    email: dev@naboom.co.za
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.naboom.co.za/v1
    description: Production server
  - url: https://staging-api.naboom.co.za/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Channel Management
  /channels:
    get:
      summary: List channels
      description: Get list of channels accessible to the authenticated user
      tags:
        - Channels
      parameters:
        - name: type
          in: query
          description: Filter by channel type
          schema:
            type: string
            enum: [general, safety, events, announcements, custom]
        - name: private
          in: query
          description: Filter by privacy setting
          schema:
            type: boolean
        - name: limit
          in: query
          description: Number of channels to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of channels to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create channel
      description: Create a new communication channel
      tags:
        - Channels
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /channels/{channelId}:
    get:
      summary: Get channel details
      description: Get detailed information about a specific channel
      tags:
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Channel details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update channel
      description: Update channel settings and information
      tags:
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelRequest'
      responses:
        '200':
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete channel
      description: Delete a channel (admin/owner only)
      tags:
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Channel deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /channels/{channelId}/messages:
    get:
      summary: Get channel messages
      description: Get messages from a specific channel
      tags:
        - Messages
      parameters:
        - name: channelId
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Number of messages to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
        - name: after
          in: query
          description: Get messages after this timestamp
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Send message
      description: Send a new message to a channel
      tags:
        - Messages
      parameters:
        - name: channelId
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}:
    put:
      summary: Edit message
      description: Edit an existing message
      tags:
        - Messages
      parameters:
        - name: messageId
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMessageRequest'
      responses:
        '200':
          description: Message updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete message
      description: Delete a message
      tags:
        - Messages
      parameters:
        - name: messageId
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}/reactions:
    post:
      summary: Add reaction
      description: Add a reaction to a message
      tags:
        - Messages
      parameters:
        - name: messageId
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReactionRequest'
      responses:
        '201':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageReaction'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Remove reaction
      description: Remove a reaction from a message
      tags:
        - Messages
      parameters:
        - name: messageId
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
        - name: emoji
          in: query
          required: true
          description: Emoji to remove
          schema:
            type: string
      responses:
        '204':
          description: Reaction removed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Event Management
  /events:
    get:
      summary: List events
      description: Get list of events
      tags:
        - Events
      parameters:
        - name: type
          in: query
          description: Filter by event type
          schema:
            type: string
            enum: [meeting, social, safety, emergency, maintenance, other]
        - name: status
          in: query
          description: Filter by event status
          schema:
            type: string
            enum: [draft, published, cancelled, completed]
        - name: startDate
          in: query
          description: Filter events starting from this date
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter events ending before this date
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of events to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create event
      description: Create a new event
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{eventId}:
    get:
      summary: Get event details
      description: Get detailed information about a specific event
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update event
      description: Update event details
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete event
      description: Delete an event
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{eventId}/rsvp:
    post:
      summary: RSVP to event
      description: Respond to an event invitation
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RSVPRequest'
      responses:
        '200':
          description: RSVP updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendee'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Search
  /search:
    get:
      summary: Search messages and events
      description: Search across messages, events, and users
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: type
          in: query
          description: Type of content to search
          schema:
            type: string
            enum: [messages, events, users, all]
            default: all
        - name: channelId
          in: query
          description: Limit search to specific channel
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          description: Search from this date
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Search until this date
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # WebSocket
  /ws:
    get:
      summary: WebSocket connection
      description: Establish WebSocket connection for real-time updates
      tags:
        - WebSocket
      parameters:
        - name: token
          in: query
          required: true
          description: Authentication token
          schema:
            type: string
      responses:
        '101':
          description: WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    # Core Entities
    UserProfile:
      type: object
      required:
        - id
        - username
        - displayName
        - email
        - language
        - timezone
        - status
        - lastSeen
        - preferences
        - permissions
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 30
        displayName:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        avatar:
          type: string
          format: uri
        language:
          type: string
          enum: [en, af]
        timezone:
          type: string
        status:
          type: string
          enum: [online, away, busy, offline]
        lastSeen:
          type: string
          format: date-time
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        permissions:
          $ref: '#/components/schemas/UserPermissions'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserPreferences:
      type: object
      properties:
        notifications:
          $ref: '#/components/schemas/NotificationSettings'
        theme:
          type: string
          enum: [light, dark, auto]
        messageDisplay:
          type: string
          enum: [compact, comfortable]
        showOnlineStatus:
          type: boolean
        showTypingIndicators:
          type: boolean
        autoTranslate:
          type: boolean

    NotificationSettings:
      type: object
      properties:
        email:
          type: boolean
        push:
          type: boolean
        inApp:
          type: boolean
        mentions:
          type: boolean
        events:
          type: boolean

    UserPermissions:
      type: object
      properties:
        canCreateChannels:
          type: boolean
        canManageEvents:
          type: boolean
        canModerateMessages:
          type: boolean
        canInviteUsers:
          type: boolean
        canDeleteMessages:
          type: boolean

    Channel:
      type: object
      required:
        - id
        - name
        - type
        - isPrivate
        - members
        - settings
        - createdAt
        - updatedAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
        type:
          type: string
          enum: [general, safety, events, announcements, custom]
        isPrivate:
          type: boolean
        members:
          type: array
          items:
            $ref: '#/components/schemas/ChannelMember'
        settings:
          $ref: '#/components/schemas/ChannelSettings'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid

    ChannelMember:
      type: object
      required:
        - userId
        - role
        - joinedAt
        - notifications
      properties:
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [owner, admin, moderator, member]
        joinedAt:
          type: string
          format: date-time
        lastReadAt:
          type: string
          format: date-time
        notifications:
          type: boolean

    ChannelSettings:
      type: object
      properties:
        allowFileUploads:
          type: boolean
        allowReactions:
          type: boolean
        allowThreads:
          type: boolean
        maxMessageLength:
          type: integer
          minimum: 1
          maximum: 2000
        slowMode:
          type: integer
          minimum: 0
        autoDelete:
          type: integer
          minimum: 0

    Message:
      type: object
      required:
        - id
        - channelId
        - userId
        - content
        - type
        - timestamp
        - reactions
        - attachments
        - metadata
      properties:
        id:
          type: string
          format: uuid
        channelId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
          minLength: 1
          maxLength: 2000
        type:
          type: string
          enum: [text, image, file, system, event, announcement]
        timestamp:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        replyTo:
          type: string
          format: uuid
        threadId:
          type: string
          format: uuid
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/MessageReaction'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
        metadata:
          $ref: '#/components/schemas/MessageMetadata'
        isOffline:
          type: boolean

    MessageReaction:
      type: object
      required:
        - emoji
        - userId
        - timestamp
      properties:
        emoji:
          type: string
        userId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    MessageAttachment:
      type: object
      required:
        - id
        - filename
        - mimeType
        - size
        - url
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        mimeType:
          type: string
        size:
          type: integer
          minimum: 0
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri

    MessageMetadata:
      type: object
      properties:
        isEdited:
          type: boolean
        isDeleted:
          type: boolean
        isPinned:
          type: boolean
        isSystemMessage:
          type: boolean
        language:
          type: string
        translation:
          type: string

    Event:
      type: object
      required:
        - id
        - title
        - description
        - type
        - status
        - startDate
        - organizer
        - attendees
        - isPublic
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        type:
          type: string
          enum: [meeting, social, safety, emergency, maintenance, other]
        status:
          type: string
          enum: [draft, published, cancelled, completed]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/EventLocation'
        organizer:
          type: string
          format: uuid
        attendees:
          type: array
          items:
            $ref: '#/components/schemas/EventAttendee'
        maxAttendees:
          type: integer
          minimum: 1
          maximum: 1000
        isPublic:
          type: boolean
        channelId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventLocation:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        isVirtual:
          type: boolean
        meetingLink:
          type: string
          format: uri

    EventAttendee:
      type: object
      required:
        - userId
        - status
        - joinedAt
      properties:
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [attending, maybe, not_attending, waitlist]
        joinedAt:
          type: string
          format: date-time
        notes:
          type: string
          maxLength: 500

    # Request/Response DTOs
    CreateChannelRequest:
      type: object
      required:
        - name
        - type
        - isPrivate
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
        type:
          type: string
          enum: [general, safety, events, announcements, custom]
        isPrivate:
          type: boolean
        settings:
          $ref: '#/components/schemas/ChannelSettings'

    UpdateChannelRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
        settings:
          $ref: '#/components/schemas/ChannelSettings'

    SendMessageRequest:
      type: object
      required:
        - content
        - type
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 2000
        type:
          type: string
          enum: [text, image, file, system, event, announcement]
        replyTo:
          type: string
          format: uuid
        threadId:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'

    EditMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 2000

    AddReactionRequest:
      type: object
      required:
        - emoji
      properties:
        emoji:
          type: string

    CreateEventRequest:
      type: object
      required:
        - title
        - description
        - type
        - startDate
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        type:
          type: string
          enum: [meeting, social, safety, emergency, maintenance, other]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/EventLocation'
        maxAttendees:
          type: integer
          minimum: 1
          maximum: 1000
        isPublic:
          type: boolean
        channelId:
          type: string
          format: uuid

    UpdateEventRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        type:
          type: string
          enum: [meeting, social, safety, emergency, maintenance, other]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/EventLocation'
        status:
          type: string
          enum: [draft, published, cancelled, completed]
        maxAttendees:
          type: integer
          minimum: 1
          maximum: 1000
        isPublic:
          type: boolean

    RSVPRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [attending, maybe, not_attending, waitlist]
        notes:
          type: string
          maxLength: 500

    # Response DTOs
    ChannelListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Channel'

    MessageListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Message'

    EventListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Event'

    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SearchResult'

    SearchResult:
      type: object
      required:
        - id
        - type
        - content
        - timestamp
        - relevanceScore
        - highlights
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [message, event, user]
        content:
          type: string
        channelId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        relevanceScore:
          type: number
          minimum: 0
          maximum: 1
        highlights:
          type: array
          items:
            type: string

    PaginatedResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
        - hasNext
        - hasPrev
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    # Error Responses
    ErrorResponse:
      type: object
      required:
        - code
        - message
        - timestamp
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            code:
              type: string
              enum: [VALIDATION_ERROR]
            details:
              type: object
              properties:
                field:
                  type: string
                message:
                  type: string

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Channels
    description: Channel management operations
  - name: Messages
    description: Message operations
  - name: Events
    description: Event management operations
  - name: Search
    description: Search operations
  - name: WebSocket
    description: Real-time WebSocket connection